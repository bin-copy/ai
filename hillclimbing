from math import inf

class Node:
    def __init__(self,state,value):
        self.state=state
        self.value=value

    def get_children(self):
        children = []
        if self.state > 0:
            children.append(Node(self.state-1,self.value-1))
        if self.state < 10:
            children.append(Node(self.state+1,self.value+1))
        return children

def evaluate(node:Node)->float:
    return node.value

def hill_climbing(start_node:Node)->Node:
    current_node = start_node
    best_value = -inf
    best_node = None
    print(f"Starting Hill Climbing from node {current_node.state} with value {current_node.value}")

    while True:
        current_value = evaluate(current_node)
        print(f"Evaluating node {current_node.state}: {current_value}")

        if current_value > best_value:
            best_node = current_node
            best_value = current_value
        else:
            print("No better neighbor found, returning the best node.")
            return best_node

        children = current_node.get_children()

        for child in children:
            child_value = evaluate(child)
            print(f"Evaluating child node {child.state}: {child_value}")
            if child_value > best_value:
                best_value = child_value
                best_node = child
                current_node = child
                print(f"Moving to better node {child.state} with value {child.value}")
                break
        else:
            print("No better child found,returning the best node.")
            return best_node
start_node = Node(state=5, value=5)
result_node = hill_climbing(start_node)

print(f"Best node found: {result_node.state} with value {result_node.value}")
