import heapq
import networkx as nx
import matplotlib.pyplot as plt
from collections import deque
# Romanian map graph (cities and their roads with distances)
graph = {
    "Arad": [("Zerind", 75), ("Sibiu", 140), ("Timisoara", 118)],
    "Bucharest": [("Fagaras", 211), ("Giurgiu", 90), ("Pitesti", 101)],
    "Craiova": [("Dobreta", 120), ("Rimnicu Vilcea", 146)],
    "Dobreta": [("Craiova", 120), ("Mehadia", 75)],
    "Eforie": [("Hirsova", 86)],
    "Fagaras": [("Bucharest", 211), ("Sibiu", 99)],
    "Giurgiu": [("Bucharest", 90)],
    "Hirsova": [("Eforie", 86), ("Urziceni", 98)],
    "Iasi": [("Neamt", 87)],
    "Lugoj": [("Mehadia", 70), ("Timisoara", 111)],
    "Mehadia": [("Lugoj", 70), ("Dobreta", 75)],
    "Neamt": [("Iasi", 87)],
    "Oradea": [("Zerind", 71), ("Sibiu", 151)],
    "Pitesti": [("Bucharest", 101), ("Craiova", 138), ("Rimnicu Vilcea", 97)],
    "Rimnicu Vilcea": [("Pitesti", 97), ("Craiova", 146), ("Sibiu", 80)],
    "Sibiu": [("Fagaras", 99), ("Arad", 140), ("Rimnicu Vilcea", 80), ("Oradea", 151)],
    "Timisoara": [("Arad", 118), ("Lugoj", 111)],
    "Urziceni": [("Hirsova", 98), ("Bucharest", 85), ("Vaslui", 142)],
    "Vaslui": [("Urziceni", 142), ("Iasi", 92)],
    "Zerind": [("Arad", 75), ("Oradea", 71)]
}

# Depth-First Search (DFS) with total distance
def dfs(graph, start, goal, visited=None, total_distance=0):
    if visited is None:
        visited = set()
    visited.add(start)
    if start == goal:
        return [start], total_distance
    for neighbor, travel_cost in graph[start]:
        if neighbor not in visited:
            path, path_distance = dfs(graph, neighbor, goal, visited, total_distance + travel_cost)
            if path:
                return [start] + path, path_distance
    return None, 0  			# No path found

def visualize_graph(graph, path):
    G = nx.Graph()
    # Add edges to the graph
    for city, neighbors in graph.items():
        for neighbor, distance in neighbors:
            G.add_edge(city, neighbor, weight=distance)
    pos = nx.spring_layout(G)  # Positioning the nodes
    labels = nx.get_edge_attributes(G, 'weight')
    # Adjust node size and font size
    node_size = 300  		# Larger node size
    font_size = 10    		# Smaller font size for fitting text inside circles
    # Draw the graph
    nx.draw(
        G, pos, with_labels=True, node_size=node_size, 
        node_color="lightblue", font_size=font_size, font_weight="bold"
    )
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
    # Highlight the path
    if path:
        edges_in_path = list(zip(path, path[1:]))
        nx.draw_networkx_edges(G, pos, edgelist=edges_in_path, edge_color='red', width=2)
    plt.show()
def test_search_algorithms(start, goal):
    print(f"Searching from {start} to {goal}...\n")

     # Test DFS
    path, distance = dfs(graph, start, goal)
    print("Depth First Search:", path)
    print("Depth First Search Total Distance:", distance)
    visualize_graph(graph, path)
    
if __name__ == "__main__":
    start = "Arad"
    goal = "Bucharest"
    test_search_algorithms(start, goal)
