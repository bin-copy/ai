MAX, MIN = float('inf'), float('-inf')
def alpha_beta(depth, node_index, maximizing_player, values, alpha, beta):
    # Terminating condition. i.e # leaf node is reached
    if depth == 0:
        return values[node_index]

    if maximizing_player:
        best = MIN
        # Recur for left and right children
        for i in range(0, 2):
            val = alpha_beta(depth - 1, node_index * 2 + i, False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            # Alpha Beta Pruning
            if beta <= alpha:
                break
        return best
    else:
        best = MAX
        # Recur for left and # right children
        for i in range(0, 2):
            val = alpha_beta(depth - 1, node_index * 2 + i, True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            # Alpha Beta Pruning
            if beta <= alpha:
                break
        return best
if __name__ == "__main__":
    values = [3, 4, 7, 8, 1, 2, 0, -1]
    print("The optimal value is :", alpha_beta(3, 0, True, values, MIN, MAX))
